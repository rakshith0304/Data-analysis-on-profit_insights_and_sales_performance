sales.data$order_day <- weekdays(as.Date(sales.data$order_date))
sales.data$repeat_purchases <- ave(sales.data$order_id, sales.data$email, FUN = length)
sales.data$repeat_purchases <- as.numeric(as.character(sales.data$repeat_purchases))
sales.data$repeat_purchases_normalized <- scale(sales.data$repeat_purchases)
sales.data$State <- sapply(strsplit(as.character(sales.data$geography), ","), function(x) x[3])
purchase_frequency <- sales.data %>%
group_by(order_date) %>%
summarise(Orders = n())
ggplot(purchase_frequency, aes(x = order_date, y = Orders)) +
geom_line() +
labs(x = "Order Date", y = "Number of Orders", title = "Customer Purchase Frequency Over Time")
category_sales_profit <- sales.data %>%
group_by(category) %>%
summarise(Total_Sales = sum(sales),
Total_Profit = sum(profit))
category_sales_profit <- category_sales_profit[order(category_sales_profit$Total_Sales, decreasing = TRUE),]
ggplot(category_sales_profit, aes(x = reorder(category, Total_Sales), y = Total_Sales)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Category", y = "Total Sales", title = "Total Sales by Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(category_sales_profit, aes(x = reorder(category, Total_Profit), y = Total_Profit)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(x = "Category", y = "Total Profit", title = "Total Profit by Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
monthly_data <- sales.data %>%
mutate(Month = floor_date(order_date, "month")) %>%
group_by(Month) %>%
summarise(sales = sum(sales), profit = sum(profit))
ggplot(monthly_data, aes(x = Month)) +
geom_line(aes(y = sales, colour = "Sales")) +
geom_line(aes(y = profit, colour = "Profit")) +
labs(title = "Monthly Sales and Profit", x = "Month", y = "Value") +
scale_colour_manual("", values = c("Sales" = "blue", "Profit" = "green"))
state_analysis <- sales.data %>%
group_by(State) %>%
summarise(sales = sum(sales), profit = sum(profit)) %>%
arrange(desc(sales))
top_states <- head(state_analysis, 10)
ggplot(top_states, aes(x = reorder(State, sales), y = sales, fill = State)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 States by Sales", x = "State", y = "Sales") +
coord_flip()
category_performance <- sales.data %>%
group_by(category) %>%
summarise(sales = sum(sales), profit = sum(profit))
p <- ggplot(category_performance, aes(x=category)) +
geom_bar(aes(y=sales), stat="identity", fill="skyblue") +
theme_minimal() +
labs(y="Sales", x="Category", title="Sales and Profit by Product Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p + geom_line(aes(y=profit, group=1), color="red") +
geom_point(aes(y=profit), color="darkred") +
scale_y_continuous(sec.axis = sec_axis(~., name="Profit"))
# Feature Engineering
sales.data$order_day <- weekdays(as.Date(sales.data$order_date))
sales.data$repeat_purchases <- ave(sales.data$order_id, sales.data$email, FUN = length)
# Model Training
model <- lm(profit ~  category + repeat_purchases + quantity, data = sales.data)
# Model Evaluation
predicted_profit <- predict(model, newdata = sales.data)
mae <- mean(abs(predicted_profit - sales.data$profit))
mse <- mean((predicted_profit - sales.data$profit)^2)
rsquared <- summary(model)$r.squared
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("Mean Squared Error (MSE):", mse, "\n")
cat("R-squared:", rsquared, "\n")
# Interpretation
kable(summary(model)$coefficients, caption = "Regression Coefficients")
plot(model, which = 1)
# Normal Q-Q Plot
plot(model, which = 2)
data_for_nn <- model.matrix(~ category + order_day + repeat_purchases_normalized - 1, data = sales.data)
target <- sales.data$profit
set.seed(123)
k <- 5
folds <- createFolds(target, k = k, list = TRUE, returnTrain = FALSE)
# Initialize variables to store performance metrics
maes <- numeric(k)
mses <- numeric(k)
# Loop through each fold
for(i in 1:k) {
# Split the data into training and testing based on folds
test_indices <- folds[[i]]
train_indices <- setdiff(1:nrow(data_for_nn), test_indices)
train_data <- data_for_nn[train_indices, ]
test_data <- data_for_nn[test_indices, ]
train_target <- target[train_indices]
test_target <- target[test_indices]
# Train the model
nn_model <- nnet(train_data, train_target, size = 5, decay = 0.000005, linout = TRUE, maxit = 3000)
# Make predictions
predictions <- predict(nn_model, test_data)
# Calculate and store the performance metrics for this fold
maes[i] <- mean(abs(predictions - test_target))
mses[i] <- mean((predictions - test_target)^2)
}
# Calculate the average performance across all folds
avg_mae <- mean(maes)
avg_mse <- mean(mses)
cat("Average Mean Absolute Error (MAE) across all folds:", avg_mae, "\n")
cat("Average Mean Squared Error (MSE) across all folds:", avg_mse, "\n")
# Data
data_matrix <- model.matrix(~ year + month + day_of_week + category + sales_normalized + quantity_normalized + shipping_duration_normalized - 1+quantity, data = sales.data)
profit_vector <- sales.data$profit
# Elastic Net Regression
set.seed(123)
cv_elasticnet <- cv.glmnet(data_matrix, profit_vector, alpha = 0.5)
elasticnet_model <- glmnet(data_matrix, profit_vector, alpha = 0.5, lambda = cv_elasticnet$lambda.min)
# Predictions
predictions_elasticnet <- predict(elasticnet_model, s = cv_elasticnet$lambda.min, newx = data_matrix)
# Calculate MAE and MSE
mae_elasticnet <- mean(abs(predictions_elasticnet - profit_vector))
mse_elasticnet <- mean((predictions_elasticnet - profit_vector)^2)
cat("Elastic Net - Mean Absolute Error (MAE):", mae_elasticnet, "\n")
cat("Elastic Net - Mean Squared Error (MSE):", mse_elasticnet, "\n")
actuals <- profit_vector
# Calculate R-squared
ss_total <- sum((actuals - mean(actuals))^2)
ss_res <- sum((actuals - predictions_elasticnet)^2)
r_squared <- 1 - (ss_res / ss_total)
cat("R-squared:", r_squared, "\n")
# Actual VS Predicted Plot
plot(actuals, predictions_elasticnet, main = "Actual vs. Predicted Profits",
xlab = "Actual Profits", ylab = "Predicted Profits", pch = 19, col = "blue")
abline(0, 1, col = "red") # Diagonal line indicating perfect predictions
# Residual Plot
residuals <- actuals - predictions_elasticnet
plot(actuals, residuals, main = "Residual Plot",
xlab = "Actual Profits", ylab = "Residuals", pch = 19, col = "darkgreen")
abline(h = 0, col = "red") # Horizontal line at 0 indicating no error
set.seed(123)
rf_model <- randomForest(x = data_matrix, y = profit_vector, ntree = 500)
#Predictions
predictions_rf <- predict(rf_model, newdata = data_matrix)
#Calculate MAE and MSE
mae_rf <- mean(abs(predictions_rf - profit_vector))
mse_rf <- mean((predictions_rf - profit_vector)^2)
cat("Random Forest - Mean Absolute Error (MAE):", mae_rf, "\n")
cat("Random Forest - Mean Squared Error (MSE):", mse_rf, "\n")
actuals <- profit_vector
#Calculate R-squared
ss_total <- sum((actuals - mean(actuals))^2)
ss_res <- sum((actuals - predictions_rf)^2)
r_squared_rf <- 1 - (ss_res / ss_total)
cat("R-squared:", r_squared_rf, "\n")
#Actual VS Predicted Plot
plot(actuals, predictions_rf, main = "Actual vs. Predicted Profits (Random Forest)",
xlab = "Actual Profits", ylab = "Predicted Profits", pch = 19, col = "blue")
abline(0, 1, col = "red") # Diagonal line indicating perfect predictions
#Residual Plot
residuals_rf <- actuals - predictions_rf
plot(actuals, residuals_rf, main = "Residual Plot (Random Forest)",
xlab = "Actual Profits", ylab = "Residuals", pch = 19, col = "darkgreen")
abline(h = 0, col = "red")
knitr::opts_chunk$set(echo = FALSE)
suppressWarnings({
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(nnet)
library(modelr)
library(tidyverse)
library(glmnet)
library(randomForest)
library(knitr)
library(caret)
library(kableExtra)
})
sales.data <- read_excel("Amazon_2_Raw.xlsx")
colnames(sales.data) <- c("order_id","order_date","ship_date","email","geography","category","product_name",
"sales","quantity","profit")
sales.data$order_date <- as.Date(sales.data$order_date)
sales.data$ship_date <- as.Date(sales.data$ship_date)
sales.data$year <- format(sales.data$order_date, "%Y")
sales.data$month <- format(sales.data$order_date, "%m")
sales.data$day_of_week <- weekdays(sales.data$order_date)
sales.data$shipping_duration <- as.numeric(difftime(sales.data$ship_date, sales.data$order_date,
units = "days"))
sales.data$year <- as.factor(sales.data$year)
sales.data$month <- as.factor(sales.data$month)
sales.data$day_of_week <- as.factor(sales.data$day_of_week)
sales.data$category <- as.factor(sales.data$category)
sales.data$sales_normalized <- scale(sales.data$sales)
sales.data$quantity_normalized <- scale(sales.data$quantity)
sales.data$shipping_duration_normalized <- scale(sales.data$shipping_duration)
sales.data$order_day <- weekdays(as.Date(sales.data$order_date))
sales.data$repeat_purchases <- ave(sales.data$order_id, sales.data$email, FUN = length)
sales.data$repeat_purchases <- as.numeric(as.character(sales.data$repeat_purchases))
sales.data$repeat_purchases_normalized <- scale(sales.data$repeat_purchases)
sales.data$State <- sapply(strsplit(as.character(sales.data$geography), ","), function(x) x[3])
purchase_frequency <- sales.data %>%
group_by(order_date) %>%
summarise(Orders = n())
ggplot(purchase_frequency, aes(x = order_date, y = Orders)) +
geom_line() +
labs(x = "Order Date", y = "Number of Orders", title = "Customer Purchase Frequency Over Time")
category_sales_profit <- sales.data %>%
group_by(category) %>%
summarise(Total_Sales = sum(sales),
Total_Profit = sum(profit))
category_sales_profit <- category_sales_profit[order(category_sales_profit$Total_Sales, decreasing = TRUE),]
ggplot(category_sales_profit, aes(x = reorder(category, Total_Sales), y = Total_Sales)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Category", y = "Total Sales", title = "Total Sales by Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(category_sales_profit, aes(x = reorder(category, Total_Profit), y = Total_Profit)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(x = "Category", y = "Total Profit", title = "Total Profit by Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
monthly_data <- sales.data %>%
mutate(Month = floor_date(order_date, "month")) %>%
group_by(Month) %>%
summarise(sales = sum(sales), profit = sum(profit))
ggplot(monthly_data, aes(x = Month)) +
geom_line(aes(y = sales, colour = "Sales")) +
geom_line(aes(y = profit, colour = "Profit")) +
labs(title = "Monthly Sales and Profit", x = "Month", y = "Value") +
scale_colour_manual("", values = c("Sales" = "blue", "Profit" = "green"))
state_analysis <- sales.data %>%
group_by(State) %>%
summarise(sales = sum(sales), profit = sum(profit)) %>%
arrange(desc(sales))
top_states <- head(state_analysis, 10)
ggplot(top_states, aes(x = reorder(State, sales), y = sales, fill = State)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 States by Sales", x = "State", y = "Sales") +
coord_flip()
category_performance <- sales.data %>%
group_by(category) %>%
summarise(sales = sum(sales), profit = sum(profit))
p <- ggplot(category_performance, aes(x=category)) +
geom_bar(aes(y=sales), stat="identity", fill="skyblue") +
theme_minimal() +
labs(y="Sales", x="Category", title="Sales and Profit by Product Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p + geom_line(aes(y=profit, group=1), color="red") +
geom_point(aes(y=profit), color="darkred") +
scale_y_continuous(sec.axis = sec_axis(~., name="Profit"))
# Model Training
model <- lm(profit ~  category + repeat_purchases + quantity, data = sales.data)
# Model Evaluation
predicted_profit <- predict(model, newdata = sales.data)
mae <- mean(abs(predicted_profit - sales.data$profit))
mse <- mean((predicted_profit - sales.data$profit)^2)
rsquared <- summary(model)$r.squared
#kable(summary(model)$coefficients, caption = "Regression Coefficients")
model_coefficients <- summary(model)$coefficients
model_coefficients_part1 <- model_coefficients[1:5,]
kable(model_coefficients_part1, caption = "Regression Coefficients") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
model_coefficients_part2 <- model_coefficients[6:nrow(model_coefficients),]
kable(model_coefficients_part2, caption = "Regression Coefficients (Part 2)") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
plot(model, which = 1)
plot(model, which = 2)
data_for_nn <- model.matrix(~ category + order_day + repeat_purchases_normalized - 1, data = sales.data)
target <- sales.data$profit
set.seed(123)
k <- 5
folds <- createFolds(target, k = k, list = TRUE, returnTrain = FALSE)
maes <- numeric(k)
mses <- numeric(k)
for(i in 1:k) {
test_indices <- folds[[i]]
train_indices <- setdiff(1:nrow(data_for_nn), test_indices)
train_data <- data_for_nn[train_indices, ]
test_data <- data_for_nn[test_indices, ]
train_target <- target[train_indices]
test_target <- target[test_indices]
nn_model <- nnet(train_data, train_target, size = 5, decay = 0.000005, linout = TRUE, maxit = 3000, trace = FALSE)
predictions <- predict(nn_model, test_data)
maes[i] <- mean(abs(predictions - test_target))
mses[i] <- mean((predictions - test_target)^2)
}
# Calculate the average performance across all folds
avg_mae <- mean(maes)
avg_mse <- mean(mses)
#cat("Average Mean Absolute Error (MAE) across all folds:", avg_mae, "\n")
#cat("Average Mean Squared Error (MSE) across all folds:", avg_mse, "\n")
# Data
data_matrix <- model.matrix(~ year + month + day_of_week + category + sales_normalized + quantity_normalized + shipping_duration_normalized - 1+quantity, data = sales.data)
profit_vector <- sales.data$profit
# Elastic Net Regression
set.seed(123)
cv_elasticnet <- cv.glmnet(data_matrix, profit_vector, alpha = 0.5)
elasticnet_model <- glmnet(data_matrix, profit_vector, alpha = 0.5, lambda = cv_elasticnet$lambda.min)
# Predictions
predictions_elasticnet <- predict(elasticnet_model, s = cv_elasticnet$lambda.min, newx = data_matrix)
# Calculate MAE and MSE
mae_elasticnet <- mean(abs(predictions_elasticnet - profit_vector))
mse_elasticnet <- mean((predictions_elasticnet - profit_vector)^2)
#cat("Elastic Net - Mean Absolute Error (MAE):", mae_elasticnet, "\n")
#cat("Elastic Net - Mean Squared Error (MSE):", mse_elasticnet, "\n")
actuals <- profit_vector
# Calculate R-squared
ss_total <- sum((actuals - mean(actuals))^2)
ss_res <- sum((actuals - predictions_elasticnet)^2)
r_squared <- 1 - (ss_res / ss_total)
#cat("R-squared:", r_squared, "\n")
residuals <- actuals - predictions_elasticnet
plot(actuals, predictions_elasticnet, main = "Actual vs. Predicted Profits",
xlab = "Actual Profits", ylab = "Predicted Profits", pch = 19, col = "blue")
abline(0, 1, col = "red") # Diagonal line indicating perfect predictions
plot(actuals, residuals, main = "Residual Plot",
xlab = "Actual Profits", ylab = "Residuals", pch = 19, col = "darkgreen")
abline(h = 0, col = "red") # Horizontal line at 0 indicating no error
set.seed(123)
rf_model <- randomForest(x = data_matrix, y = profit_vector, ntree = 500)
#Predictions
predictions_rf <- predict(rf_model, newdata = data_matrix)
#Calculate MAE and MSE
mae_rf <- mean(abs(predictions_rf - profit_vector))
mse_rf <- mean((predictions_rf - profit_vector)^2)
cat("Random Forest - Mean Absolute Error (MAE):", mae_rf, "\n")
cat("Random Forest - Mean Squared Error (MSE):", mse_rf, "\n")
actuals <- profit_vector
#Calculate R-squared
ss_total <- sum((actuals - mean(actuals))^2)
ss_res <- sum((actuals - predictions_rf)^2)
r_squared_rf <- 1 - (ss_res / ss_total)
cat("R-squared:", r_squared_rf, "\n")
plot(actuals, predictions_rf, main = "Actual vs. Predicted Profits (Random Forest)",
xlab = "Actual Profits", ylab = "Predicted Profits", pch = 19, col = "blue")
abline(0, 1, col = "red") # Diagonal line indicating perfect predictions
residuals_rf <- actuals - predictions_rf
plot(actuals, residuals_rf, main = "Residual Plot (Random Forest)",
xlab = "Actual Profits", ylab = "Residuals", pch = 19, col = "darkgreen")
abline(h = 0, col = "red")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(nnet)
library(modelr)
library(tidyverse)
library(glmnet)
library(randomForest)
library(knitr)
library(caret)
sales.data <- read_excel("Amazon_2_Raw.xlsx")
colnames(sales.data) <- c("order_id","order_date","ship_date","email","geography","category","product_name","sales","quantity","profit")
kable(summary(sales.data))
kable(head(sales.data))
sales.data$order_date <- as.Date(sales.data$order_date)
sales.data$ship_date <- as.Date(sales.data$ship_date)
sales.data$year <- format(sales.data$order_date, "%Y")
sales.data$month <- format(sales.data$order_date, "%m")
sales.data$day_of_week <- weekdays(sales.data$order_date)
sales.data$shipping_duration <- as.numeric(difftime(sales.data$ship_date, sales.data$order_date, units = "days"))
sales.data$year <- as.factor(sales.data$year)
sales.data$month <- as.factor(sales.data$month)
sales.data$day_of_week <- as.factor(sales.data$day_of_week)
sales.data$category <- as.factor(sales.data$category)
sales.data$sales_normalized <- scale(sales.data$sales)
sales.data$quantity_normalized <- scale(sales.data$quantity)
sales.data$shipping_duration_normalized <- scale(sales.data$shipping_duration)
sales.data$order_day <- weekdays(as.Date(sales.data$order_date))
sales.data$repeat_purchases <- ave(sales.data$order_id, sales.data$email, FUN = length)
sales.data$repeat_purchases <- as.numeric(as.character(sales.data$repeat_purchases))
sales.data$repeat_purchases_normalized <- scale(sales.data$repeat_purchases)
sales.data$State <- sapply(strsplit(as.character(sales.data$geography), ","), function(x) x[3])
purchase_frequency <- sales.data %>%
group_by(order_date) %>%
summarise(Orders = n())
ggplot(purchase_frequency, aes(x = order_date, y = Orders)) +
geom_line() +
labs(x = "Order Date", y = "Number of Orders", title = "Customer Purchase Frequency Over Time")
category_sales_profit <- sales.data %>%
group_by(category) %>%
summarise(Total_Sales = sum(sales),
Total_Profit = sum(profit))
category_sales_profit <- category_sales_profit[order(category_sales_profit$Total_Sales, decreasing = TRUE),]
ggplot(category_sales_profit, aes(x = reorder(category, Total_Sales), y = Total_Sales)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Category", y = "Total Sales", title = "Total Sales by Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(category_sales_profit, aes(x = reorder(category, Total_Profit), y = Total_Profit)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(x = "Category", y = "Total Profit", title = "Total Profit by Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
monthly_data <- sales.data %>%
mutate(Month = floor_date(order_date, "month")) %>%
group_by(Month) %>%
summarise(sales = sum(sales), profit = sum(profit))
ggplot(monthly_data, aes(x = Month)) +
geom_line(aes(y = sales, colour = "Sales")) +
geom_line(aes(y = profit, colour = "Profit")) +
labs(title = "Monthly Sales and Profit", x = "Month", y = "Value") +
scale_colour_manual("", values = c("Sales" = "blue", "Profit" = "green"))
state_analysis <- sales.data %>%
group_by(State) %>%
summarise(sales = sum(sales), profit = sum(profit)) %>%
arrange(desc(sales))
top_states <- head(state_analysis, 10)
ggplot(top_states, aes(x = reorder(State, sales), y = sales, fill = State)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 States by Sales", x = "State", y = "Sales") +
coord_flip()
category_performance <- sales.data %>%
group_by(category) %>%
summarise(sales = sum(sales), profit = sum(profit))
p <- ggplot(category_performance, aes(x=category)) +
geom_bar(aes(y=sales), stat="identity", fill="skyblue") +
theme_minimal() +
labs(y="Sales", x="Category", title="Sales and Profit by Product Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p + geom_line(aes(y=profit, group=1), color="red") +
geom_point(aes(y=profit), color="darkred") +
scale_y_continuous(sec.axis = sec_axis(~., name="Profit"))
# Feature Engineering
sales.data$order_day <- weekdays(as.Date(sales.data$order_date))
sales.data$repeat_purchases <- ave(sales.data$order_id, sales.data$email, FUN = length)
# Model Training
model <- lm(profit ~  category + repeat_purchases + quantity, data = sales.data)
# Model Evaluation
predicted_profit <- predict(model, newdata = sales.data)
mae <- mean(abs(predicted_profit - sales.data$profit))
mse <- mean((predicted_profit - sales.data$profit)^2)
rsquared <- summary(model)$r.squared
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("Mean Squared Error (MSE):", mse, "\n")
cat("R-squared:", rsquared, "\n")
# Interpretation
kable(summary(model)$coefficients, caption = "Regression Coefficients")
plot(model, which = 1)
# Normal Q-Q Plot
plot(model, which = 2)
data_for_nn <- model.matrix(~ category + order_day + repeat_purchases_normalized - 1, data = sales.data)
target <- sales.data$profit
set.seed(123)
k <- 5
folds <- createFolds(target, k = k, list = TRUE, returnTrain = FALSE)
# Initialize variables to store performance metrics
maes <- numeric(k)
mses <- numeric(k)
# Loop through each fold
for(i in 1:k) {
# Split the data into training and testing based on folds
test_indices <- folds[[i]]
train_indices <- setdiff(1:nrow(data_for_nn), test_indices)
train_data <- data_for_nn[train_indices, ]
test_data <- data_for_nn[test_indices, ]
train_target <- target[train_indices]
test_target <- target[test_indices]
# Train the model
nn_model <- nnet(train_data, train_target, size = 5, decay = 0.000005, linout = TRUE, maxit = 3000)
# Make predictions
predictions <- predict(nn_model, test_data)
# Calculate and store the performance metrics for this fold
maes[i] <- mean(abs(predictions - test_target))
mses[i] <- mean((predictions - test_target)^2)
}
# Calculate the average performance across all folds
avg_mae <- mean(maes)
avg_mse <- mean(mses)
cat("Average Mean Absolute Error (MAE) across all folds:", avg_mae, "\n")
cat("Average Mean Squared Error (MSE) across all folds:", avg_mse, "\n")
# Data
data_matrix <- model.matrix(~ year + month + day_of_week + category + sales_normalized + quantity_normalized + shipping_duration_normalized - 1+quantity, data = sales.data)
profit_vector <- sales.data$profit
# Elastic Net Regression
set.seed(123)
cv_elasticnet <- cv.glmnet(data_matrix, profit_vector, alpha = 0.5)
elasticnet_model <- glmnet(data_matrix, profit_vector, alpha = 0.5, lambda = cv_elasticnet$lambda.min)
# Predictions
predictions_elasticnet <- predict(elasticnet_model, s = cv_elasticnet$lambda.min, newx = data_matrix)
# Calculate MAE and MSE
mae_elasticnet <- mean(abs(predictions_elasticnet - profit_vector))
mse_elasticnet <- mean((predictions_elasticnet - profit_vector)^2)
cat("Elastic Net - Mean Absolute Error (MAE):", mae_elasticnet, "\n")
cat("Elastic Net - Mean Squared Error (MSE):", mse_elasticnet, "\n")
actuals <- profit_vector
# Calculate R-squared
ss_total <- sum((actuals - mean(actuals))^2)
ss_res <- sum((actuals - predictions_elasticnet)^2)
r_squared <- 1 - (ss_res / ss_total)
cat("R-squared:", r_squared, "\n")
# Actual VS Predicted Plot
plot(actuals, predictions_elasticnet, main = "Actual vs. Predicted Profits",
xlab = "Actual Profits", ylab = "Predicted Profits", pch = 19, col = "blue")
abline(0, 1, col = "red") # Diagonal line indicating perfect predictions
# Residual Plot
residuals <- actuals - predictions_elasticnet
plot(actuals, residuals, main = "Residual Plot",
xlab = "Actual Profits", ylab = "Residuals", pch = 19, col = "darkgreen")
abline(h = 0, col = "red") # Horizontal line at 0 indicating no error
set.seed(123)
rf_model <- randomForest(x = data_matrix, y = profit_vector, ntree = 500)
#Predictions
predictions_rf <- predict(rf_model, newdata = data_matrix)
#Calculate MAE and MSE
mae_rf <- mean(abs(predictions_rf - profit_vector))
mse_rf <- mean((predictions_rf - profit_vector)^2)
cat("Random Forest - Mean Absolute Error (MAE):", mae_rf, "\n")
cat("Random Forest - Mean Squared Error (MSE):", mse_rf, "\n")
actuals <- profit_vector
#Calculate R-squared
ss_total <- sum((actuals - mean(actuals))^2)
ss_res <- sum((actuals - predictions_rf)^2)
r_squared_rf <- 1 - (ss_res / ss_total)
cat("R-squared:", r_squared_rf, "\n")
#Actual VS Predicted Plot
plot(actuals, predictions_rf, main = "Actual vs. Predicted Profits (Random Forest)",
xlab = "Actual Profits", ylab = "Predicted Profits", pch = 19, col = "blue")
abline(0, 1, col = "red") # Diagonal line indicating perfect predictions
#Residual Plot
residuals_rf <- actuals - predictions_rf
plot(actuals, residuals_rf, main = "Residual Plot (Random Forest)",
xlab = "Actual Profits", ylab = "Residuals", pch = 19, col = "darkgreen")
abline(h = 0, col = "red")
